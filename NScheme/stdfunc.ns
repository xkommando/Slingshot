(def first 
	(func(ls)
		(car ls)
	)
)

(def set!
	(func(old new)
		(begin
			(undef old)
			(def old new)
		)
	)
)

(def filter 
	(func (pred? ls)
		(if (null? ls)
			(list )
			(if (pred? (car ls))
				（prepend (car ls) (pred? (cdr ls)  )
				 (pred? (cdr ls) 
			)
		)
	)
)

(def map 
	(func (f alist)
		(if (null? alist)
			(list )
			(append (list  (f (car alist)))  (map f (cdr alist)) )
        )
	)
)

(def reduce 
	(func (init op ls)
		(if (null? ls)
			init
			(op (car ls) (reduce init op (cdr ls))
			)
		)
	)
)

(def reverse 
	(func(ls)
		(if (null? ls)
			(list )
			(append (reverse (cdr ls)) (car ls))
		)
	)
)


(def pow2 (func(a)(** a 2)))
(def mul(func(a b)(* a b)))
(def add(func(a b)(+ a b)))

(def sum
	(func(ls)
		(if (null? ls)
			0
			(+ (car ls) (sum (cdr ls)))
		)
	)
)

(def als (list 1 2 3 4 5))

(def aals (list als als als))

(def okls
	(func(ls)
		(> (length ls) 4)
	)
)
(def bigger
	(func(a b)(> a b))
)

(def bigge3
	(func(a)(> a 3))
)

